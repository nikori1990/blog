(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{363:function(a,t,r){"use strict";r.r(t);var v=r(45),_=Object(v.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"面试集锦"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#面试集锦"}},[a._v("#")]),a._v(" 面试集锦")]),a._v(" "),r("h2",{attrs:{id:"_1-java"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-java"}},[a._v("#")]),a._v(" 1. java")]),a._v(" "),r("h3",{attrs:{id:"_1-1-java-语言有哪些特点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-java-语言有哪些特点"}},[a._v("#")]),a._v(" 1.1 java 语言有哪些特点")]),a._v(" "),r("ul",[r("li",[a._v("简单易学, 相比C++ 少了指针等")]),a._v(" "),r("li",[a._v("面向对象 "),r("strong",[a._v("封装")]),a._v("、"),r("strong",[a._v("继承")]),a._v("、"),r("strong",[a._v("多态")])]),a._v(" "),r("li",[a._v("平台无关性 java 虚拟机实现")]),a._v(" "),r("li",[a._v("可靠性/健壮性")])]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("Java编译器能够检测许多在其他语言中仅在运行时才能检测出来的问题。\n")])])]),r("ul",[r("li",[a._v("安全性")])]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("Java适用于网络/分布式环境。从一开始，Java程序能够防范各种攻击，其中包括：\n运行时堆栈溢出。\n破坏自己进程空间之外的内存。\n未经授权读写文件。\n")])])]),r("ul",[r("li",[a._v("支持多线程")]),a._v(" "),r("li",[a._v("支持网络编程并且很方便")]),a._v(" "),r("li",[a._v("编译与解释并存")])]),a._v(" "),r("h3",{attrs:{id:"_1-2-字符常量和字符串常量的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-字符常量和字符串常量的区别"}},[a._v("#")]),a._v(" 1.2 字符常量和字符串常量的区别")]),a._v(" "),r("ul",[r("li",[a._v("形式上：字符常量是单引号，一个字符，字符串常量是双引号，若干字符")]),a._v(" "),r("li",[a._v("含义上： 字符常量相当于一个整型值（ASCII值），可以参加表达式运算， 字符串常量代表一个地址，该字符串在内存中存放位置")]),a._v(" "),r("li",[a._v("占内存大小： 字符常量只占2个字节， 字符串常量占若干个字节")])]),a._v(" "),r("blockquote",[r("p",[a._v("注意： char 在 java 中占 2个字节")])]),a._v(" "),r("ul",[r("li",[a._v("构造器constructor 是否可被override\n父类的私有属性和构造方法并不能被继承，所以constructor不能被override， 但是可以overload")])]),a._v(" "),r("h3",{attrs:{id:"_1-3-string-stringbuffer-和-stringbuilder-的区别-string为什么不可变"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-string-stringbuffer-和-stringbuilder-的区别-string为什么不可变"}},[a._v("#")]),a._v(" 1.3 String StringBuffer 和 StringBuilder 的区别，String为什么不可变")]),a._v(" "),r("ul",[r("li",[r("p",[a._v("String 类使用 final 关键字字符数组保存字符串\n"),r("code",[a._v("private final char value[]")]),a._v(", 所以String 对象是不可变的。")])]),a._v(" "),r("li",[r("p",[a._v("StringBuffer 和 StringBuilder 都继承自 AbstractStringBuilder 类， 但 AbsractStringBuilder 中 char[] value 没有用 final 修饰， 所以这两种对象都是可变的。")])]),a._v(" "),r("li",[r("p",[a._v("线程安全性")]),a._v(" "),r("ul",[r("li",[a._v("String 中的对象是不可变的，即常量，线程安全")]),a._v(" "),r("li",[a._v("StringBuffer 对方法加了同步锁， 所以线程是安全的")]),a._v(" "),r("li",[a._v("StringBuilder 并没有加同步锁，所以线程不安全")])])])]),a._v(" "),r("h3",{attrs:{id:"_1-3-自动装箱与拆箱"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-自动装箱与拆箱"}},[a._v("#")]),a._v(" 1.3 自动装箱与拆箱")]),a._v(" "),r("p",[a._v("装箱： 将基本类型用它们对应的引用类型包装起来\n拆箱： 将包装类型转换为基本数据类型")]),a._v(" "),r("h3",{attrs:{id:"_1-4-在一个静态方法内调用一个非静态成员-为什么-是非法的"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-在一个静态方法内调用一个非静态成员-为什么-是非法的"}},[a._v("#")]),a._v(" 1.4 在一个静态方法内调用一个非静态成员 为什么 是非法的")]),a._v(" "),r("p",[a._v("由于静态方法可以不通过对象进行调用， 因此在静态方法里， 不能调用其他非静态变量，也不可以访问非静态成员变量。")])])}),[],!1,null,null,null);t.default=_.exports}}]);